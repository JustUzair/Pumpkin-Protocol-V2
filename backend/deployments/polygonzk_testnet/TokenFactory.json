{
  "address": "0x7da10510e12778790d14d3CD723140BAf674bFcA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percentages",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "getAllAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAllNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "getAllPercentages",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAllSymbols",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAllTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "getAllUnderlying",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAmountOfIndexTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingIndex",
          "type": "uint256"
        }
      ],
      "name": "getSingleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingIndex",
          "type": "uint256"
        }
      ],
      "name": "getSinglePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSingleTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingIndex",
          "type": "uint256"
        }
      ],
      "name": "getSingleUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexAddress",
          "type": "address"
        }
      ],
      "name": "getSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "issueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amtToSell",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58819750461332a5d47a88594e2ea195b3fa2e8a55930bad1521aab4238bac60",
  "receipt": {
    "to": null,
    "from": "0x4e8fD06E8e4623589F1A4006b857472d70d2560E",
    "contractAddress": "0x7da10510e12778790d14d3CD723140BAf674bFcA",
    "transactionIndex": 0,
    "gasUsed": "5007215",
    "logsBloom": "0x
    "blockHash": "0xe8638d34e51661b559f0ccfe7d56da7aa9ab86aab7b0da82855c72094155c351",
    "transactionHash": "0x58819750461332a5d47a88594e2ea195b3fa2e8a55930bad1521aab4238bac60",
    "logs": [],
    "blockNumber": 3150976,
    "cumulativeGasUsed": "5007215",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e8cf0d54d61e2d1236f18ec82aabd470",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"getAllAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAllNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"getAllPercentages\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAllSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAllTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"getAllUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAmountOfIndexTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingIndex\",\"type\":\"uint256\"}],\"name\":\"getSingleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingIndex\",\"type\":\"uint256\"}],\"name\":\"getSinglePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSingleTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingIndex\",\"type\":\"uint256\"}],\"name\":\"getSingleUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexAddress\",\"type\":\"address\"}],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amtToSell\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectFee(address)\":{\"params\":{\"_indexAddress\":\"= index token to withdraw from, requires msg.sender is owner\"}},\"getAllAmounts(address)\":{\"params\":{\"_indexAddress\":\"= address of index token\"}},\"getAllPercentages(address)\":{\"params\":{\"_indexAddress\":\"= address of index token\"}},\"getAllTokenAddresses(address)\":{\"params\":{\"_creator\":\"= address of user\"}},\"getAllUnderlying(address)\":{\"params\":{\"_indexAddress\":\"= address of index token\"}},\"getAmountOfIndexTokens(address)\":{\"params\":{\"_creator\":\"= address of user\"}},\"getSingleAmount(address,uint256)\":{\"params\":{\"_indexAddress\":\"= address of index token\",\"underlyingIndex\":\"= index of Index token's underlying assets array\"}},\"getSinglePercentage(address,uint256)\":{\"params\":{\"_indexAddress\":\"= address of index token\",\"underlyingIndex\":\"= index of index token's underlying assets array\"}},\"getSingleTokenAddress(address,uint256)\":{\"params\":{\"_creator\":\"= address of user\",\"index\":\"= index of user's created Index token\"}},\"getSingleUnderlying(address,uint256)\":{\"params\":{\"_indexAddress\":\"= address of index token\",\"underlyingIndex\":\"= index of Index token's array of underlying assets\"}},\"issueToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"= address of Index Token\",\"amount\":\"= amount of tokens to issue\"}},\"rebalance(address,uint256,uint256,uint256)\":{\"params\":{\"_amtToSell\":\"= amount of underlying token to sell\",\"_tokenAddress\":\"= address of index token\",\"_underlyingBuy\":\"= index of index token's underlying assets array to buy\",\"_underlyingSell\":\"= index of index token's underlying assets array to sell\"}},\"redeemToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"= address of Index Token\",\"amount\":\"= amount of Index Token to burn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFee(address)\":{\"notice\":\"sends 1% of all index tokens to token creator\"},\"getAllAmounts(address)\":{\"notice\":\"return array of all token balances in an index\"},\"getAllPercentages(address)\":{\"notice\":\"get array of all percentages for a token\"},\"getAllTokenAddresses(address)\":{\"notice\":\"return array of tokens per address\"},\"getAllUnderlying(address)\":{\"notice\":\"get array of all underlying assets of an index token\"},\"getAmountOfIndexTokens(address)\":{\"notice\":\"returns the amount of index tokens a user has created\"},\"getSingleAmount(address,uint256)\":{\"notice\":\"get balance of a single token balance in an index\"},\"getSinglePercentage(address,uint256)\":{\"notice\":\"same as above, but get percentage for a specific underlying asset\"},\"getSingleTokenAddress(address,uint256)\":{\"notice\":\"Same as above, but returns address of a single index token by entering owner address, and index of the token\"},\"getSingleUnderlying(address,uint256)\":{\"notice\":\"Same as above, but returns address of a single underlying token of a index token\"},\"issueToken(address,uint256)\":{\"notice\":\"mint/issue tokens in existing Index Token\"},\"rebalance(address,uint256,uint256,uint256)\":{\"notice\":\"rebalance, maybe give index of underlying asset to sell,receieve, and amount of token sold\"},\"redeemToken(address,uint256)\":{\"notice\":\"redeem token, burn index token, receive underlying assets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/IndexToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Router/IUniswapV2Router.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract IndexTokenNew is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    uint public totalSupply;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public allowance;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals = 18;\\r\\n\\r\\n    //Index token constants\\r\\n    address immutable owner;\\r\\n    address[] public holders;\\r\\n\\r\\n    address[] public tokens;\\r\\n    uint[] public percentages;\\r\\n\\r\\n    address uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\\r\\n    IUniswapV2Router02 uniswap = IUniswapV2Router02(uniswapAddress);\\r\\n    address wMATICAddr = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\r\\n\\r\\n\\r\\n    constructor(address _owner, address[] memory _tokens, uint[] memory  _percentages, string memory _name, string memory _symbol) {\\r\\n        //check percentages\\r\\n        uint numOfTokens = _percentages.length;\\r\\n        uint percentageCounter;\\r\\n        uint _decimalFactor = 10**16;\\r\\n\\r\\n        for(uint i; i < numOfTokens; i++) {\\r\\n            percentageCounter += _percentages[i];\\r\\n        }\\r\\n\\r\\n        //multiply to correct decimals\\r\\n        for(uint i; i < numOfTokens; i++){\\r\\n            _percentages[i] = _percentages[i] * _decimalFactor;\\r\\n        }\\r\\n\\r\\n        require(percentageCounter <= 100, \\\"percentages do not add up to 100\\\");\\r\\n        owner = _owner;\\r\\n        tokens = _tokens;\\r\\n        percentages = _percentages;\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function getMinToken(uint token,uint amount) public view returns (uint256 result){\\r\\n        uint _decimalFactor = 10**18;\\r\\n        uint percentage = percentages[token];\\r\\n        result = percentage.mul(amount).div(_decimalFactor);\\r\\n    }\\r\\n\\r\\n    //Index token mint\\r\\n    function mint(uint amount) public {\\r\\n        //get number of tokens using length\\r\\n        uint numOfTokens = tokens.length;\\r\\n    \\r\\n        //loop through all tokens\\r\\n        for(uint i; i < numOfTokens; i++){\\r\\n            address _token = tokens[i];\\r\\n\\r\\n            uint transferAmount = getMinToken(i, amount);\\r\\n            bool success = IERC20(_token).transferFrom(tx.origin,address(this), transferAmount);\\r\\n            require(success, \\\"transfer failed\\\");\\r\\n        }\\r\\n        //add to holders array\\r\\n        holders.push(tx.origin);\\r\\n\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function redeem(uint amount) public {\\r\\n        //get number of tokens using length\\r\\n        require(amount <= balanceOf[tx.origin] );\\r\\n\\r\\n        uint numOfTokens = tokens.length;\\r\\n        address[] memory _tokens = tokens;\\r\\n\\r\\n        //loop through all tokens\\r\\n        for (uint i; i < numOfTokens; i++) {\\r\\n            address _token = _tokens[i];\\r\\n\\r\\n            uint transferAmount = getMinToken(i, amount);\\r\\n            IERC20(_token).approve(tx.origin, transferAmount);\\r\\n            bool success = IERC20(_token).transfer(tx.origin, transferAmount);\\r\\n            require(success, \\\"transfer failed\\\");\\r\\n        }\\r\\n\\r\\n        burn(tx.origin,amount); \\r\\n    }\\r\\n\\r\\n\\r\\n    //owner withdraw streaming fee\\r\\n    function streamingFee() public  {\\r\\n        require(tx.origin == owner, \\\"Not owner!\\\");\\r\\n\\r\\n        address[] memory _holders = holders;\\r\\n\\r\\n        uint feeCounter;\\r\\n     \\r\\n\\r\\n\\r\\n    // REMOVE DUPLICATE HOLDERS IN ARRAY\\r\\n    // use nested for loop to find the duplicate elements in array \\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint z;\\r\\n    uint size = holders.length;\\r\\n    for ( x = 0; x < size; x ++)  \\r\\n    {  \\r\\n        for ( y = x + 1; y < size; y++)  \\r\\n        {  \\r\\n            // use if statement to check duplicate element  \\r\\n            if ( _holders[x] == _holders[y])  \\r\\n            {  \\r\\n                // delete the current position of the duplicate element  \\r\\n                for ( z = y; z < size - 1; z++)  \\r\\n                {  \\r\\n                    _holders[z] = _holders[z + 1];  \\r\\n                }  \\r\\n                // decrease the size of array after removing duplicate element  \\r\\n                size--;  \\r\\n                  \\r\\n            // if the position of the elements is changes, don't increase the index j  \\r\\n                y--;      \\r\\n            }  \\r\\n        }  \\r\\n    }\\r\\n\\r\\n        //rebase / reduce supply by 1%\\r\\n        uint numHolders = _holders.length;\\r\\n        for (uint i; i < numHolders; i++){\\r\\n            if (balanceOf[_holders[i]] > 0){\\r\\n            uint amtToBurn = (balanceOf[_holders[i]]) / 99;\\r\\n            \\r\\n            burn(_holders[i], amtToBurn);\\r\\n            feeCounter += amtToBurn;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _mint(feeCounter);\\r\\n\\r\\n    \\r\\n    }\\r\\n\\r\\n    function rebalancePercentages() public {  \\r\\n        require(tx.origin == owner); \\r\\n        uint numOfTokens = tokens.length;\\r\\n\\r\\n        uint total;\\r\\n        uint _decimalFactor = 10**18;\\r\\n\\r\\n        //find balance of all tokens\\r\\n        for (uint i; i < numOfTokens; i++) {\\r\\n\\r\\n            total += IERC20(tokens[i]).balanceOf(address(this));\\r\\n\\r\\n        }\\r\\n\\r\\n        //change percentage values in storage\\r\\n        for (uint i; i < numOfTokens; i++) {\\r\\n            percentages[i] = IERC20(tokens[i]).balanceOf(address(this)) * _decimalFactor / total;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function rebalance(uint tokenOut, uint tokenIn, uint _amount) public {\\r\\n        address[] memory path = new address[](2);\\r\\n        //path[0] = tokens[tokenOut]; \\r\\n        //path[1] = tokens[tokenIn];\\r\\n        //better rates:\\r\\n        path[0] = tokens[tokenOut];\\r\\n        path[1] = wMATICAddr; \\r\\n        path[1] = tokens[tokenIn];\\r\\n\\r\\n        \\r\\n        IERC20(tokens[tokenOut]).approve(uniswapAddress,_amount);\\r\\n\\r\\n        uniswap.swapExactTokensForTokens(_amount, 0, path, address(this), block.timestamp + 15);\\r\\n\\r\\n        rebalancePercentages();\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getName() public view returns (string memory) {\\r\\n        return name;\\r\\n    }\\r\\n\\r\\n    function getSymbol() public view returns (string memory) {\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    function getPercentages(uint i) public view returns (uint) {\\r\\n        return percentages[i];\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTotalSupply() public view returns (uint256){\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool) {\\r\\n        balanceOf[tx.origin] -= amount;\\r\\n        balanceOf[recipient] += amount;\\r\\n\\r\\n        //add to holders array\\r\\n        holders.push(recipient);\\r\\n\\r\\n        emit Transfer(tx.origin, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool) {\\r\\n        allowance[tx.origin][spender] = amount;\\r\\n        emit Approval(tx.origin, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool) {\\r\\n        allowance[sender][tx.origin] -= amount;\\r\\n        balanceOf[sender] -= amount;\\r\\n        balanceOf[recipient] += amount;\\r\\n\\r\\n\\r\\n        //add to holders array\\r\\n        holders.push(recipient);\\r\\n\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _mint(uint amount) internal {\\r\\n        balanceOf[tx.origin] += amount;\\r\\n        totalSupply += amount;\\r\\n\\r\\n        emit Transfer(address(0), tx.origin, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address burnee, uint amount) internal {\\r\\n        balanceOf[burnee] -= amount;\\r\\n        totalSupply -= amount;\\r\\n        emit Transfer(tx.origin, address(0), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    //some getter helpers\\r\\n    function getTokens() public view returns (address[] memory){\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    function getSingleToken(uint _index) public view returns (address) {\\r\\n        return tokens[_index];\\r\\n    }\\r\\n\\r\\n    function getAllPercentages() public view returns (uint[] memory) {\\r\\n        return percentages;\\r\\n    }\\r\\n\\r\\n    function getSinglePercentage(uint _index) public view returns (uint) {\\r\\n        return percentages[_index];\\r\\n    }\\r\\n\\r\\n    function getNumOfTokens() public view returns (uint) {\\r\\n        return tokens.length;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x260b810b8563d8f81d19961d5f3c591041e6789e9a0db8a4f65d8a01f38ab1bc\",\"license\":\"MIT\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./IndexToken.sol\\\";\\r\\n\\r\\ncontract TokenFactory {\\r\\n\\r\\n    mapping(address => mapping(uint => address)) public addressToTokens;\\r\\n    mapping(address => uint) tokenCount;\\r\\n\\r\\n    //STATE CHANGES\\r\\n\\r\\n    function createToken(address[] memory _tokens, uint[] memory  _percentages, string memory _name, string memory _symbol) public {\\r\\n\\r\\n        //create new index token\\r\\n        IndexTokenNew newToken = new IndexTokenNew(msg.sender, _tokens, _percentages, _name, _symbol);\\r\\n        ++tokenCount[msg.sender];\\r\\n        //map msg.sender's tokenCounter to new token to msg.sender\\r\\n        addressToTokens[msg.sender][tokenCount[msg.sender]] = address(newToken);   \\r\\n    }\\r\\n\\r\\n    /// @notice mint/issue tokens in existing Index Token\\r\\n    /// @param _tokenAddress = address of Index Token\\r\\n    /// @param amount = amount of tokens to issue\\r\\n    function issueToken(address _tokenAddress, uint amount) public {\\r\\n        IndexTokenNew(_tokenAddress).mint(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice redeem token, burn index token, receive underlying assets\\r\\n    /// @param _tokenAddress = address of Index Token\\r\\n    /// @param amount = amount of Index Token to burn\\r\\n    function redeemToken(address _tokenAddress, uint amount) public {\\r\\n        IndexTokenNew(_tokenAddress).redeem(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice rebalance, maybe give index of underlying asset to sell,receieve, and amount of token sold\\r\\n    /// @param _tokenAddress = address of index token\\r\\n    /// @param _underlyingSell = index of index token's underlying assets array to sell\\r\\n    /// @param _underlyingBuy = index of index token's underlying assets array to buy\\r\\n    /// @param _amtToSell = amount of underlying token to sell\\r\\n    function rebalance(address _tokenAddress, uint _underlyingSell, uint _underlyingBuy, uint _amtToSell) public {\\r\\n        IndexTokenNew(_tokenAddress).rebalance(_underlyingSell, _underlyingBuy, _amtToSell);\\r\\n    }\\r\\n\\r\\n    /// @notice sends 1% of all index tokens to token creator\\r\\n    /// @param _indexAddress = index token to withdraw from, requires msg.sender is owner\\r\\n    function collectFee(address _indexAddress) public {\\r\\n        IndexTokenNew(_indexAddress).streamingFee();\\r\\n    }\\r\\n\\r\\n    //GETTERS\\r\\n\\r\\n    /// @notice returns the amount of index tokens a user has created\\r\\n    /// @param _creator = address of user\\r\\n    function getAmountOfIndexTokens(address _creator) public view returns (uint) {\\r\\n        return tokenCount[_creator];\\r\\n    }\\r\\n\\r\\n    /// @notice return array of tokens per address\\r\\n    /// @param _creator = address of user\\r\\n    function getAllTokenAddresses(address _creator) public view returns (address[] memory) {\\r\\n        uint numTokens = tokenCount[_creator];\\r\\n        address[] memory tokenAddresses = new address[](numTokens); \\r\\n        for(uint i = 0; i < numTokens; i++ ) {\\r\\n            tokenAddresses[i] = addressToTokens[_creator][i+1];  \\r\\n        }\\r\\n        return tokenAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Same as above, but returns address of a single index token by entering owner address, and index of the token\\r\\n    /// @param  _creator = address of user\\r\\n    /// @param  index = index of user's created Index token\\r\\n    function getSingleTokenAddress(address _creator, uint index) public view returns (address) {\\r\\n        return addressToTokens[_creator][index];\\r\\n    }\\r\\n\\r\\n    /// @notice get array of all underlying assets of an index token\\r\\n    /// @param _indexAddress = address of index token\\r\\n    function getAllUnderlying(address _indexAddress) public view returns (address[] memory) {\\r\\n        return IndexTokenNew(_indexAddress).getTokens();\\r\\n    }\\r\\n\\r\\n    /// @notice Same as above, but returns address of a single underlying token of a index token\\r\\n    /// @param _indexAddress = address of index token\\r\\n    /// @param underlyingIndex = index of Index token's array of underlying assets\\r\\n    function getSingleUnderlying(address _indexAddress, uint underlyingIndex) public view returns (address) {\\r\\n        return IndexTokenNew(_indexAddress).getSingleToken(underlyingIndex);\\r\\n    }\\r\\n\\r\\n    /// @notice get array of all percentages for a token\\r\\n    /// @param _indexAddress = address of index token\\r\\n    function getAllPercentages(address _indexAddress) public view returns (uint[] memory) {\\r\\n        return IndexTokenNew(_indexAddress).getAllPercentages();\\r\\n    }\\r\\n\\r\\n    /// @notice same as above, but get percentage for a specific underlying asset\\r\\n    /// @param _indexAddress = address of index token\\r\\n    /// @param underlyingIndex = index of index token's underlying assets array\\r\\n    function getSinglePercentage(address _indexAddress, uint underlyingIndex) public view returns (uint) {\\r\\n        return IndexTokenNew(_indexAddress).getSinglePercentage(underlyingIndex);\\r\\n    }\\r\\n\\r\\n    /// @notice return array of all token balances in an index\\r\\n    /// @param _indexAddress = address of index token\\r\\n    function getAllAmounts(address _indexAddress) public view returns (uint[] memory) {\\r\\n        uint numOfTokens = IndexTokenNew(_indexAddress).getNumOfTokens();\\r\\n        uint[] memory tokenAmounts = new uint[](numOfTokens); \\r\\n        for(uint i; i < numOfTokens; i++ ) {\\r\\n            uint tokenAmount = getSingleAmount(_indexAddress, i);\\r\\n            tokenAmounts[i] = tokenAmount;\\r\\n        }\\r\\n        return tokenAmounts;\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice get balance of a single token balance in an index\\r\\n    /// @param _indexAddress = address of index token\\r\\n    /// @param underlyingIndex = index of Index token's underlying assets array\\r\\n    function getSingleAmount(address _indexAddress, uint underlyingIndex) public view returns (uint) {\\r\\n        address underlyingToken = getSingleUnderlying(_indexAddress, underlyingIndex);\\r\\n        return IERC20(underlyingToken).balanceOf(_indexAddress);\\r\\n    }\\r\\n\\r\\n    function getName(address _indexAddress) public view returns (string memory) {\\r\\n        return IndexTokenNew(_indexAddress).getName();\\r\\n    }\\r\\n\\r\\n    function getSymbol(address _indexAddress) public view returns (string memory) {\\r\\n        return IndexTokenNew(_indexAddress).getSymbol();\\r\\n    }\\r\\n\\r\\n    function getAllNames(address _creator) public view returns (string[] memory) {\\r\\n        uint numTokens = getAmountOfIndexTokens(_creator);\\r\\n        string[] memory tokenNames = new string[](numTokens);\\r\\n        for(uint i; i < numTokens; i++) {\\r\\n            tokenNames[i] = getName(addressToTokens[_creator][i+1]);\\r\\n        }\\r\\n        return tokenNames;\\r\\n    }\\r\\n\\r\\n    function getAllSymbols(address _creator) public view returns (string[] memory) {\\r\\n        uint numTokens = getAmountOfIndexTokens(_creator); //number of tokens a user has created\\r\\n        string[] memory tokenSymbols = new string[](numTokens);   //memory array to store all symbols temporarily\\r\\n        for(uint i; i < numTokens; i++) {\\r\\n            tokenSymbols[i] = getSymbol(addressToTokens[_creator][i+1]); //assign \\r\\n        }\\r\\n        \\r\\n        return tokenSymbols;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\",\"keccak256\":\"0xf04a42aa1e4c8291eacd84f8362d8572cd928e6fd27a6239dacd269e60e48125\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\",\"keccak256\":\"0x7dcb84d9ea2e878ae2c08484a1e82c8977d8fd89de766a007817eea759bc9e3c\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    \\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x645436c592392a83c9cacf22f174bb5ae84ee83aaf520433a63e37f2c6f691d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506159ee806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200013c5760003560e01c8063830cbbbd11620000bd578063be1a0f00116200007b578063be1a0f0014620003dd578063c9b2e5221462000413578063db0068561462000449578063e56b2ee7146200047f578063e74a84ea14620004b5576200013c565b8063830cbbbd14620002fb578063857a5a7b146200031b57806385e3ac7714620003515780638714a76a1462000387578063911dab0214620003bd576200013c565b806328de1325116200010b57806328de132514620002035780633c81659414620002395780635fd4b08a146200026f57806369b59e7514620002a55780637d60a08e14620002c5576200013c565b8063067dcc32146200014157806312be683714620001775780631709094d14620001ad5780632332d74b14620001e3575b600080fd5b6200015f600480360381019062000159919062001276565b620004d5565b6040516200016e919062001412565b60405180910390f35b6200019560048036038101906200018f919062001471565b62000613565b604051620001a49190620014c9565b60405180910390f35b620001cb6004803603810190620001c5919062001471565b6200068d565b604051620001da9190620014f7565b60405180910390f35b620002016004803603810190620001fb919062001514565b62000726565b005b6200022160048036038101906200021b919062001276565b6200079f565b60405162000230919062001654565b60405180910390f35b62000257600480360381019062000251919062001471565b6200081f565b604051620002669190620014f7565b60405180910390f35b6200028d600480360381019062000287919062001276565b620008a8565b6040516200029c9190620016ca565b60405180910390f35b620002c36004803603810190620002bd919062001276565b62000928565b005b620002e36004803603810190620002dd919062001276565b6200098d565b604051620002f2919062001654565b60405180910390f35b62000319600480360381019062000313919062001471565b62000b1f565b005b62000339600480360381019062000333919062001276565b62000b92565b604051620003489190620014f7565b60405180910390f35b6200036f600480360381019062000369919062001276565b62000bdb565b6040516200037e9190620017bc565b60405180910390f35b620003a560048036038101906200039f919062001471565b62000c5b565b604051620003b49190620014c9565b60405180910390f35b620003db6004803603810190620003d5919062001ae2565b62000c9d565b005b620003fb6004803603810190620003f5919062001471565b62000e0b565b6040516200040a9190620014c9565b60405180910390f35b6200043160048036038101906200042b919062001276565b62000e94565b604051620004409190620016ca565b60405180910390f35b62000467600480360381019062000461919062001276565b62000f14565b60405162000476919062001412565b60405180910390f35b6200049d600480360381019062000497919062001276565b62001052565b604051620004ac9190620017bc565b60405180910390f35b620004d36004803603810190620004cd919062001471565b6200117c565b005b60606000620004e48362000b92565b905060008167ffffffffffffffff811115620005055762000504620017e5565b5b6040519080825280602002602001820160405280156200053a57816020015b6060815260200190600190039081620005245790505b50905060005b828110156200060857620005d16000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001846200059c919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620008a8565b828281518110620005e757620005e662001c3a565b5b60200260200101819052508080620005ff9062001c69565b91505062000540565b508092505050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806200069c848462000e0b565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401620006d99190620014c9565b602060405180830381865afa158015620006f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071d919062001ccd565b91505092915050565b8373ffffffffffffffffffffffffffffffffffffffff166332b5d1ab8484846040518463ffffffff1660e01b8152600401620007659392919062001cff565b600060405180830381600087803b1580156200078057600080fd5b505af115801562000795573d6000803e3d6000fd5b5050505050505050565b60608173ffffffffffffffffffffffffffffffffffffffff1663aa6ca8086040518163ffffffff1660e01b8152600401600060405180830381865afa158015620007ed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000818919062001dfa565b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e15fccb7836040518263ffffffff1660e01b81526004016200085c9190620014f7565b602060405180830381865afa1580156200087a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a0919062001ccd565b905092915050565b60608173ffffffffffffffffffffffffffffffffffffffff166317d7de7c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015620008f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000921919062001ec9565b9050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663cb5453646040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200097157600080fd5b505af115801562000986573d6000803e3d6000fd5b5050505050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008167ffffffffffffffff811115620009f257620009f1620017e5565b5b60405190808252806020026020018201604052801562000a215781602001602082028036833780820191505090505b50905060005b8281101562000b14576000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018362000a7f919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000ac45762000ac362001c3a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808062000b0b9062001c69565b91505062000a27565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff1663db006a75826040518263ffffffff1660e01b815260040162000b5a9190620014f7565b600060405180830381600087803b15801562000b7557600080fd5b505af115801562000b8a573d6000803e3d6000fd5b505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60608173ffffffffffffffffffffffffffffffffffffffff16633388bbc36040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000c29573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000c54919062001fc1565b9050919050565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000338585858560405162000cb290620011ef565b62000cc295949392919062002012565b604051809103906000f08015801562000cdf573d6000803e3d6000fd5b509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815462000d309062001c69565b91905081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663f60322ad836040518263ffffffff1660e01b815260040162000e489190620014f7565b602060405180830381865afa15801562000e66573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e8c91906200208b565b905092915050565b60608173ffffffffffffffffffffffffffffffffffffffff1663150704016040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000ee2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000f0d919062001ec9565b9050919050565b6060600062000f238362000b92565b905060008167ffffffffffffffff81111562000f445762000f43620017e5565b5b60405190808252806020026020018201604052801562000f7957816020015b606081526020019060019003908162000f635790505b50905060005b828110156200104757620010106000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018462000fdb919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000e94565b82828151811062001026576200102562001c3a565b5b602002602001018190525080806200103e9062001c69565b91505062000f7f565b508092505050919050565b606060008273ffffffffffffffffffffffffffffffffffffffff1663512409716040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c8919062001ccd565b905060008167ffffffffffffffff811115620010e957620010e8620017e5565b5b604051908082528060200260200182016040528015620011185781602001602082028036833780820191505090505b50905060005b82811015620011715760006200113586836200068d565b9050808383815181106200114e576200114d62001c3a565b5b602002602001018181525050508080620011689062001c69565b9150506200111e565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff1663a0712d68826040518263ffffffff1660e01b8152600401620011b79190620014f7565b600060405180830381600087803b158015620011d257600080fd5b505af1158015620011e7573d6000803e3d6000fd5b505050505050565b6138fb80620020be83390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200123e8262001211565b9050919050565b620012508162001231565b81146200125c57600080fd5b50565b600081359050620012708162001245565b92915050565b6000602082840312156200128f576200128e62001207565b5b60006200129f848285016200125f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001310578082015181840152602081019050620012f3565b60008484015250505050565b6000601f19601f8301169050919050565b60006200133a82620012d4565b620013468185620012df565b935062001358818560208601620012f0565b62001363816200131c565b840191505092915050565b60006200137c83836200132d565b905092915050565b6000602082019050919050565b60006200139e82620012a8565b620013aa8185620012b3565b935083602082028501620013be85620012c4565b8060005b85811015620014005784840389528151620013de85826200136e565b9450620013eb8362001384565b925060208a01995050600181019050620013c2565b50829750879550505050505092915050565b600060208201905081810360008301526200142e818462001391565b905092915050565b6000819050919050565b6200144b8162001436565b81146200145757600080fd5b50565b6000813590506200146b8162001440565b92915050565b600080604083850312156200148b576200148a62001207565b5b60006200149b858286016200125f565b9250506020620014ae858286016200145a565b9150509250929050565b620014c38162001231565b82525050565b6000602082019050620014e06000830184620014b8565b92915050565b620014f18162001436565b82525050565b60006020820190506200150e6000830184620014e6565b92915050565b6000806000806080858703121562001531576200153062001207565b5b600062001541878288016200125f565b945050602062001554878288016200145a565b935050604062001567878288016200145a565b92505060606200157a878288016200145a565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620015bd8162001231565b82525050565b6000620015d18383620015b2565b60208301905092915050565b6000602082019050919050565b6000620015f78262001586565b62001603818562001591565b93506200161083620015a2565b8060005b83811015620016475781516200162b8882620015c3565b97506200163883620015dd565b92505060018101905062001614565b5085935050505092915050565b60006020820190508181036000830152620016708184620015ea565b905092915050565b600082825260208201905092915050565b60006200169682620012d4565b620016a2818562001678565b9350620016b4818560208601620012f0565b620016bf816200131c565b840191505092915050565b60006020820190508181036000830152620016e6818462001689565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620017258162001436565b82525050565b60006200173983836200171a565b60208301905092915050565b6000602082019050919050565b60006200175f82620016ee565b6200176b8185620016f9565b935062001778836200170a565b8060005b83811015620017af5781516200179388826200172b565b9750620017a08362001745565b9250506001810190506200177c565b5085935050505092915050565b60006020820190508181036000830152620017d8818462001752565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200181f826200131c565b810181811067ffffffffffffffff82111715620018415762001840620017e5565b5b80604052505050565b600062001856620011fd565b905062001864828262001814565b919050565b600067ffffffffffffffff821115620018875762001886620017e5565b5b602082029050602081019050919050565b600080fd5b6000620018b4620018ae8462001869565b6200184a565b90508083825260208201905060208402830185811115620018da57620018d962001898565b5b835b81811015620019075780620018f288826200125f565b845260208401935050602081019050620018dc565b5050509392505050565b600082601f830112620019295762001928620017e0565b5b81356200193b8482602086016200189d565b91505092915050565b600067ffffffffffffffff821115620019625762001961620017e5565b5b602082029050602081019050919050565b60006200198a620019848462001944565b6200184a565b90508083825260208201905060208402830185811115620019b057620019af62001898565b5b835b81811015620019dd5780620019c888826200145a565b845260208401935050602081019050620019b2565b5050509392505050565b600082601f830112620019ff57620019fe620017e0565b5b813562001a1184826020860162001973565b91505092915050565b600080fd5b600067ffffffffffffffff82111562001a3d5762001a3c620017e5565b5b62001a48826200131c565b9050602081019050919050565b82818337600083830152505050565b600062001a7b62001a758462001a1f565b6200184a565b90508281526020810184848401111562001a9a5762001a9962001a1a565b5b62001aa784828562001a55565b509392505050565b600082601f83011262001ac75762001ac6620017e0565b5b813562001ad984826020860162001a64565b91505092915050565b6000806000806080858703121562001aff5762001afe62001207565b5b600085013567ffffffffffffffff81111562001b205762001b1f6200120c565b5b62001b2e8782880162001911565b945050602085013567ffffffffffffffff81111562001b525762001b516200120c565b5b62001b6087828801620019e7565b935050604085013567ffffffffffffffff81111562001b845762001b836200120c565b5b62001b928782880162001aaf565b925050606085013567ffffffffffffffff81111562001bb65762001bb56200120c565b5b62001bc48782880162001aaf565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001c0c8262001436565b915062001c198362001436565b925082820190508082111562001c345762001c3362001bd0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062001c768262001436565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001cab5762001caa62001bd0565b5b600182019050919050565b60008151905062001cc78162001440565b92915050565b60006020828403121562001ce65762001ce562001207565b5b600062001cf68482850162001cb6565b91505092915050565b600060608201905062001d166000830186620014e6565b62001d256020830185620014e6565b62001d346040830184620014e6565b949350505050565b60008151905062001d4d8162001245565b92915050565b600062001d6a62001d648462001869565b6200184a565b9050808382526020820190506020840283018581111562001d905762001d8f62001898565b5b835b8181101562001dbd578062001da8888262001d3c565b84526020840193505060208101905062001d92565b5050509392505050565b600082601f83011262001ddf5762001dde620017e0565b5b815162001df184826020860162001d53565b91505092915050565b60006020828403121562001e135762001e1262001207565b5b600082015167ffffffffffffffff81111562001e345762001e336200120c565b5b62001e428482850162001dc7565b91505092915050565b600062001e6262001e5c8462001a1f565b6200184a565b90508281526020810184848401111562001e815762001e8062001a1a565b5b62001e8e848285620012f0565b509392505050565b600082601f83011262001eae5762001ead620017e0565b5b815162001ec084826020860162001e4b565b91505092915050565b60006020828403121562001ee25762001ee162001207565b5b600082015167ffffffffffffffff81111562001f035762001f026200120c565b5b62001f118482850162001e96565b91505092915050565b600062001f3162001f2b8462001944565b6200184a565b9050808382526020820190506020840283018581111562001f575762001f5662001898565b5b835b8181101562001f84578062001f6f888262001cb6565b84526020840193505060208101905062001f59565b5050509392505050565b600082601f83011262001fa65762001fa5620017e0565b5b815162001fb884826020860162001f1a565b91505092915050565b60006020828403121562001fda5762001fd962001207565b5b600082015167ffffffffffffffff81111562001ffb5762001ffa6200120c565b5b620020098482850162001f8e565b91505092915050565b600060a082019050620020296000830188620014b8565b81810360208301526200203d8187620015ea565b9050818103604083015262002053818662001752565b9050818103606083015262002069818562001689565b905081810360808301526200207f818462001689565b90509695505050505050565b600060208284031215620020a457620020a362001207565b5b6000620020b48482850162001d3c565b9150509291505056fe60a06040526012600560006101000a81548160ff021916908360ff160217905550737a250d5630b4cf539739df2c5dacb4c659f2488d600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730d500b1d8e8ef31e21c99d1db9a6444d3adf1270600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200013a57600080fd5b50604051620038fb380380620038fb8339818101604052810190620001609190620007f6565b600083519050600080662386f26fc10000905060005b83811015620001c257868181518110620001955762000194620008fa565b5b602002602001015183620001aa919062000958565b92508080620001b99062000993565b91505062000176565b5060005b83811015620002325781878281518110620001e657620001e5620008fa565b5b6020026020010151620001fa9190620009e0565b87828151811062000210576200020f620008fa565b5b6020026020010181815250508080620002299062000993565b915050620001c6565b5060648211156200027a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002719062000a8c565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508660079080519060200190620002c692919062000312565b508560089080519060200190620002df929190620003a1565b508460039081620002f1919062000cef565b50836004908162000303919062000cef565b50505050505050505062000dd6565b8280548282559060005260206000209081019282156200038e579160200282015b828111156200038d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000333565b5b5090506200039d9190620003f3565b5090565b828054828255906000526020600020908101928215620003e0579160200282015b82811115620003df578251825591602001919060010190620003c2565b5b509050620003ef9190620003f3565b5090565b5b808211156200040e576000816000905550600101620003f4565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004538262000426565b9050919050565b620004658162000446565b81146200047157600080fd5b50565b60008151905062000485816200045a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004db8262000490565b810181811067ffffffffffffffff82111715620004fd57620004fc620004a1565b5b80604052505050565b60006200051262000412565b9050620005208282620004d0565b919050565b600067ffffffffffffffff821115620005435762000542620004a1565b5b602082029050602081019050919050565b600080fd5b6000620005706200056a8462000525565b62000506565b9050808382526020820190506020840283018581111562000596576200059562000554565b5b835b81811015620005c35780620005ae888262000474565b84526020840193505060208101905062000598565b5050509392505050565b600082601f830112620005e557620005e46200048b565b5b8151620005f784826020860162000559565b91505092915050565b600067ffffffffffffffff8211156200061e576200061d620004a1565b5b602082029050602081019050919050565b6000819050919050565b62000644816200062f565b81146200065057600080fd5b50565b600081519050620006648162000639565b92915050565b6000620006816200067b8462000600565b62000506565b90508083825260208201905060208402830185811115620006a757620006a662000554565b5b835b81811015620006d45780620006bf888262000653565b845260208401935050602081019050620006a9565b5050509392505050565b600082601f830112620006f657620006f56200048b565b5b8151620007088482602086016200066a565b91505092915050565b600080fd5b600067ffffffffffffffff821115620007345762000733620004a1565b5b6200073f8262000490565b9050602081019050919050565b60005b838110156200076c5780820151818401526020810190506200074f565b60008484015250505050565b60006200078f620007898462000716565b62000506565b905082815260208101848484011115620007ae57620007ad62000711565b5b620007bb8482856200074c565b509392505050565b600082601f830112620007db57620007da6200048b565b5b8151620007ed84826020860162000778565b91505092915050565b600080600080600060a086880312156200081557620008146200041c565b5b6000620008258882890162000474565b955050602086015167ffffffffffffffff81111562000849576200084862000421565b5b6200085788828901620005cd565b945050604086015167ffffffffffffffff8111156200087b576200087a62000421565b5b6200088988828901620006de565b935050606086015167ffffffffffffffff811115620008ad57620008ac62000421565b5b620008bb88828901620007c3565b925050608086015167ffffffffffffffff811115620008df57620008de62000421565b5b620008ed88828901620007c3565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000965826200062f565b915062000972836200062f565b92508282019050808211156200098d576200098c62000929565b5b92915050565b6000620009a0826200062f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009d557620009d462000929565b5b600182019050919050565b6000620009ed826200062f565b9150620009fa836200062f565b925082820262000a0a816200062f565b9150828204841483151762000a245762000a2362000929565b5b5092915050565b600082825260208201905092915050565b7f70657263656e746167657320646f206e6f742061646420757020746f20313030600082015250565b600062000a7460208362000a2b565b915062000a818262000a3c565b602082019050919050565b6000602082019050818103600083015262000aa78162000a65565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b0157607f821691505b60208210810362000b175762000b1662000ab9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000b42565b62000b8d868362000b42565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000bd062000bca62000bc4846200062f565b62000ba5565b6200062f565b9050919050565b6000819050919050565b62000bec8362000baf565b62000c0462000bfb8262000bd7565b84845462000b4f565b825550505050565b600090565b62000c1b62000c0c565b62000c2881848462000be1565b505050565b5b8181101562000c505762000c4460008262000c11565b60018101905062000c2e565b5050565b601f82111562000c9f5762000c698162000b1d565b62000c748462000b32565b8101602085101562000c84578190505b62000c9c62000c938562000b32565b83018262000c2d565b50505b505050565b600082821c905092915050565b600062000cc46000198460080262000ca4565b1980831691505092915050565b600062000cdf838362000cb1565b9150826002028217905092915050565b62000cfa8262000aae565b67ffffffffffffffff81111562000d165762000d15620004a1565b5b62000d22825462000ae8565b62000d2f82828562000c54565b600060209050601f83116001811462000d67576000841562000d52578287015190505b62000d5e858262000cd1565b86555062000dce565b601f19841662000d778662000b1d565b60005b8281101562000da15784890151825560018201915060208501945060208101905062000d7a565b8683101562000dc1578489015162000dbd601f89168262000cb1565b8355505b6001600288020188555050505b505050505050565b608051612b0262000df96000396000818161082e01526115ed0152612b026000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636e66e4c6116100f9578063cb54536411610097578063e15fccb711610071578063e15fccb7146104c2578063eb84328e146104f2578063f60322ad14610522578063f885838614610552576101a9565b8063cb5453641461046c578063db006a7514610476578063dd62ed3e14610492576101a9565b8063a0712d68116100d3578063a0712d68146103e4578063a9059cbb14610400578063aa6ca80814610430578063c4e41b221461044e576101a9565b80636e66e4c61461036657806370a082311461039657806395d89b41146103c6576101a9565b806323b872dd1161016657806332b5d1ab1161014057806332b5d1ab146102de5780633388bbc3146102fa5780634f64b2be146103185780635124097114610348576101a9565b806323b872dd146102605780632a11ced014610290578063313ce567146102c0576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806315070401146101fc57806317d7de7c1461021a57806318160ddd1461023857806322cb33c914610256575b600080fd5b6101b6610582565b6040516101c39190611f85565b60405180910390f35b6101e660048036038101906101e1919061204f565b610610565b6040516101f391906120aa565b60405180910390f35b610204610702565b6040516102119190611f85565b60405180910390f35b610222610794565b60405161022f9190611f85565b60405180910390f35b610240610826565b60405161024d91906120d4565b60405180910390f35b61025e61082c565b005b61027a600480360381019061027591906120ef565b610a94565b60405161028791906120aa565b60405180910390f35b6102aa60048036038101906102a59190612142565b610ca8565b6040516102b7919061217e565b60405180910390f35b6102c8610ce7565b6040516102d591906121b5565b60405180910390f35b6102f860048036038101906102f391906121d0565b610cfa565b005b610302611079565b60405161030f91906122e1565b60405180910390f35b610332600480360381019061032d9190612142565b6110d1565b60405161033f919061217e565b60405180910390f35b610350611110565b60405161035d91906120d4565b60405180910390f35b610380600480360381019061037b9190612303565b61111d565b60405161038d91906120d4565b60405180910390f35b6103b060048036038101906103ab9190612343565b61117d565b6040516103bd91906120d4565b60405180910390f35b6103ce611195565b6040516103db9190611f85565b60405180910390f35b6103fe60048036038101906103f99190612142565b611223565b005b61041a6004803603810190610415919061204f565b6113d4565b60405161042791906120aa565b60405180910390f35b610438611554565b604051610445919061242e565b60405180910390f35b6104566115e2565b60405161046391906120d4565b60405180910390f35b6104746115eb565b005b610490600480360381019061048b9190612142565b6119b9565b005b6104ac60048036038101906104a79190612450565b611c39565b6040516104b991906120d4565b60405180910390f35b6104dc60048036038101906104d79190612142565b611c5e565b6040516104e991906120d4565b60405180910390f35b61050c60048036038101906105079190612142565b611c86565b60405161051991906120d4565b60405180910390f35b61053c60048036038101906105379190612142565b611cae565b604051610549919061217e565b60405180910390f35b61056c60048036038101906105679190612142565b611cf6565b60405161057991906120d4565b60405180910390f35b6003805461058f906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb906124bf565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b505050505081565b600081600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106f091906120d4565b60405180910390a36001905092915050565b606060048054610711906124bf565b80601f016020809104026020016040519081016040528092919081815260200182805461073d906124bf565b801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b5050505050905090565b6060600380546107a3906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546107cf906124bf565b801561081c5780601f106107f15761010080835404028352916020019161081c565b820191906000526020600020905b8154815290600101906020018083116107ff57829003601f168201915b5050505050905090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461088457600080fd5b60006007805490509050600080670de0b6b3a7640000905060005b8381101561097f57600781815481106108bb576108ba6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091e919061217e565b602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190612534565b8361096a9190612590565b92508080610977906125c4565b91505061089f565b5060005b83811015610a8e578282600783815481106109a1576109a06124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a04919061217e565b602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612534565b610a4f919061260c565b610a59919061267d565b60088281548110610a6d57610a6c6124f0565b5b90600052602060002001819055508080610a86906125c4565b915050610983565b50505050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b2291906126ae565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b7891906126ae565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bce9190612590565b925050819055506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9591906120d4565b60405180910390a3600190509392505050565b60068181548110610cb857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b6000600267ffffffffffffffff811115610d1757610d166126e2565b5b604051908082528060200260200182016040528015610d455781602001602082028036833780820191505090505b50905060078481548110610d5c57610d5b6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610d9b57610d9a6124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110610e0c57610e0b6124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060078381548110610e5a57610e596124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110610e9957610e986124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060078481548110610ee757610ee66124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f6e929190612711565b6020604051808303816000875af1158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb19190612766565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398360008430600f426110029190612590565b6040518663ffffffff1660e01b81526004016110229594939291906127d8565b6000604051808303816000875af1158015611041573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061106a919061294b565b5061107361082c565b50505050565b606060088054806020026020016040519081016040528092919081815260200182805480156110c757602002820191906000526020600020905b8154815260200190600101908083116110b3575b5050505050905090565b600781815481106110e157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600780549050905090565b600080670de0b6b3a76400009050600060088581548110611141576111406124f0565b5b90600052602060002001549050611173826111658684611d1a90919063ffffffff16565b611d3090919063ffffffff16565b9250505092915050565b60016020528060005260406000206000915090505481565b600480546111a2906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546111ce906124bf565b801561121b5780601f106111f05761010080835404028352916020019161121b565b820191906000526020600020905b8154815290600101906020018083116111fe57829003601f168201915b505050505081565b6000600780549050905060005b818110156113635760006007828154811061124e5761124d6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611287838661111d565b905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3230856040518463ffffffff1660e01b81526004016112c893929190612994565b6020604051808303816000875af11580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190612766565b90508061134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490612a17565b60405180910390fd5b505050808061135b906125c4565b915050611230565b506006329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113d082611d46565b5050565b600081600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461142591906126ae565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461147b9190612590565b925050819055506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161154291906120d4565b60405180910390a36001905092915050565b606060078054806020026020016040519081016040528092919081815260200182805480156115d857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161158e575b5050505050905090565b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167090612a83565b60405180910390fd5b600060068054806020026020016040519081016040528092919081815260200182805480156116fd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116b3575b5050505050905060008060008060006006805490509050600093505b808410156118825760018461172e9190612590565b92505b8083101561186f5785838151811061174c5761174b6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686858151811061177d5761177c6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361185c578291505b6001816117b191906126ae565b82101561183f57856001836117c69190612590565b815181106117d7576117d66124f0565b5b60200260200101518683815181106117f2576117f16124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611837906125c4565b9250506117a4565b808061184a90612aa3565b915050828061185890612aa3565b9350505b8280611867906125c4565b935050611731565b838061187a906125c4565b945050611719565b60008651905060005b818110156119a6576000600160008a84815181106118ac576118ab6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156119935760006063600160008b85815181106119105761190f6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461195d919061267d565b9050611983898381518110611975576119746124f0565b5b602002602001015182611e1d565b808861198f9190612590565b9750505b808061199e906125c4565b91505061188b565b506119b086611d46565b50505050505050565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611a0557600080fd5b6000600780549050905060006007805480602002602001604051908101604052809291908181526020018280548015611a9357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a49575b5050505050905060005b82811015611c29576000828281518110611aba57611ab96124f0565b5b602002602001015190506000611ad0838761111d565b90508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b332836040518363ffffffff1660e01b8152600401611b0d929190612711565b6020604051808303816000875af1158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190612766565b5060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb32846040518363ffffffff1660e01b8152600401611b8e929190612711565b6020604051808303816000875af1158015611bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd19190612766565b905080611c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0a90612a17565b60405180910390fd5b5050508080611c21906125c4565b915050611a9d565b50611c343284611e1d565b505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600060088281548110611c7457611c736124f0565b5b90600052602060002001549050919050565b600060088281548110611c9c57611c9b6124f0565b5b90600052602060002001549050919050565b600060078281548110611cc457611cc36124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60088181548110611d0657600080fd5b906000526020600020016000915090505481565b60008183611d28919061260c565b905092915050565b60008183611d3e919061267d565b905092915050565b80600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d959190612590565b9250508190555080600080828254611dad9190612590565b925050819055503273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e1291906120d4565b60405180910390a350565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e6c91906126ae565b9250508190555080600080828254611e8491906126ae565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ee991906120d4565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f2f578082015181840152602081019050611f14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f5782611ef5565b611f618185611f00565b9350611f71818560208601611f11565b611f7a81611f3b565b840191505092915050565b60006020820190508181036000830152611f9f8184611f4c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fe682611fbb565b9050919050565b611ff681611fdb565b811461200157600080fd5b50565b60008135905061201381611fed565b92915050565b6000819050919050565b61202c81612019565b811461203757600080fd5b50565b60008135905061204981612023565b92915050565b6000806040838503121561206657612065611fb1565b5b600061207485828601612004565b92505060206120858582860161203a565b9150509250929050565b60008115159050919050565b6120a48161208f565b82525050565b60006020820190506120bf600083018461209b565b92915050565b6120ce81612019565b82525050565b60006020820190506120e960008301846120c5565b92915050565b60008060006060848603121561210857612107611fb1565b5b600061211686828701612004565b935050602061212786828701612004565b92505060406121388682870161203a565b9150509250925092565b60006020828403121561215857612157611fb1565b5b60006121668482850161203a565b91505092915050565b61217881611fdb565b82525050565b6000602082019050612193600083018461216f565b92915050565b600060ff82169050919050565b6121af81612199565b82525050565b60006020820190506121ca60008301846121a6565b92915050565b6000806000606084860312156121e9576121e8611fb1565b5b60006121f78682870161203a565b93505060206122088682870161203a565b92505060406122198682870161203a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61225881612019565b82525050565b600061226a838361224f565b60208301905092915050565b6000602082019050919050565b600061228e82612223565b612298818561222e565b93506122a38361223f565b8060005b838110156122d45781516122bb888261225e565b97506122c683612276565b9250506001810190506122a7565b5085935050505092915050565b600060208201905081810360008301526122fb8184612283565b905092915050565b6000806040838503121561231a57612319611fb1565b5b60006123288582860161203a565b92505060206123398582860161203a565b9150509250929050565b60006020828403121561235957612358611fb1565b5b600061236784828501612004565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123a581611fdb565b82525050565b60006123b7838361239c565b60208301905092915050565b6000602082019050919050565b60006123db82612370565b6123e5818561237b565b93506123f08361238c565b8060005b8381101561242157815161240888826123ab565b9750612413836123c3565b9250506001810190506123f4565b5085935050505092915050565b6000602082019050818103600083015261244881846123d0565b905092915050565b6000806040838503121561246757612466611fb1565b5b600061247585828601612004565b925050602061248685828601612004565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124d757607f821691505b6020821081036124ea576124e9612490565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061252e81612023565b92915050565b60006020828403121561254a57612549611fb1565b5b60006125588482850161251f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061259b82612019565b91506125a683612019565b92508282019050808211156125be576125bd612561565b5b92915050565b60006125cf82612019565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361260157612600612561565b5b600182019050919050565b600061261782612019565b915061262283612019565b925082820261263081612019565b9150828204841483151761264757612646612561565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061268882612019565b915061269383612019565b9250826126a3576126a261264e565b5b828204905092915050565b60006126b982612019565b91506126c483612019565b92508282039050818111156126dc576126db612561565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050612726600083018561216f565b61273360208301846120c5565b9392505050565b6127438161208f565b811461274e57600080fd5b50565b6000815190506127608161273a565b92915050565b60006020828403121561277c5761277b611fb1565b5b600061278a84828501612751565b91505092915050565b6000819050919050565b6000819050919050565b60006127c26127bd6127b884612793565b61279d565b612019565b9050919050565b6127d2816127a7565b82525050565b600060a0820190506127ed60008301886120c5565b6127fa60208301876127c9565b818103604083015261280c81866123d0565b905061281b606083018561216f565b61282860808301846120c5565b9695505050505050565b600080fd5b61284082611f3b565b810181811067ffffffffffffffff8211171561285f5761285e6126e2565b5b80604052505050565b6000612872611fa7565b905061287e8282612837565b919050565b600067ffffffffffffffff82111561289e5761289d6126e2565b5b602082029050602081019050919050565b600080fd5b60006128c76128c284612883565b612868565b905080838252602082019050602084028301858111156128ea576128e96128af565b5b835b8181101561291357806128ff888261251f565b8452602084019350506020810190506128ec565b5050509392505050565b600082601f83011261293257612931612832565b5b81516129428482602086016128b4565b91505092915050565b60006020828403121561296157612960611fb1565b5b600082015167ffffffffffffffff81111561297f5761297e611fb6565b5b61298b8482850161291d565b91505092915050565b60006060820190506129a9600083018661216f565b6129b6602083018561216f565b6129c360408301846120c5565b949350505050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612a01600f83611f00565b9150612a0c826129cb565b602082019050919050565b60006020820190508181036000830152612a30816129f4565b9050919050565b7f4e6f74206f776e65722100000000000000000000000000000000000000000000600082015250565b6000612a6d600a83611f00565b9150612a7882612a37565b602082019050919050565b60006020820190508181036000830152612a9c81612a60565b9050919050565b6000612aae82612019565b915060008203612ac157612ac0612561565b5b60018203905091905056fea2646970667358221220d99e0ce7b94eef8be065963b0a8f32c45ba4d1e02a07d1edc75ce16f9c8ef9be64736f6c63430008130033a2646970667358221220c181f13a910e445a562d06bee650381650e8e340837bd6e7a1f6ed567d85c1a264736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200013c5760003560e01c8063830cbbbd11620000bd578063be1a0f00116200007b578063be1a0f0014620003dd578063c9b2e5221462000413578063db0068561462000449578063e56b2ee7146200047f578063e74a84ea14620004b5576200013c565b8063830cbbbd14620002fb578063857a5a7b146200031b57806385e3ac7714620003515780638714a76a1462000387578063911dab0214620003bd576200013c565b806328de1325116200010b57806328de132514620002035780633c81659414620002395780635fd4b08a146200026f57806369b59e7514620002a55780637d60a08e14620002c5576200013c565b8063067dcc32146200014157806312be683714620001775780631709094d14620001ad5780632332d74b14620001e3575b600080fd5b6200015f600480360381019062000159919062001276565b620004d5565b6040516200016e919062001412565b60405180910390f35b6200019560048036038101906200018f919062001471565b62000613565b604051620001a49190620014c9565b60405180910390f35b620001cb6004803603810190620001c5919062001471565b6200068d565b604051620001da9190620014f7565b60405180910390f35b620002016004803603810190620001fb919062001514565b62000726565b005b6200022160048036038101906200021b919062001276565b6200079f565b60405162000230919062001654565b60405180910390f35b62000257600480360381019062000251919062001471565b6200081f565b604051620002669190620014f7565b60405180910390f35b6200028d600480360381019062000287919062001276565b620008a8565b6040516200029c9190620016ca565b60405180910390f35b620002c36004803603810190620002bd919062001276565b62000928565b005b620002e36004803603810190620002dd919062001276565b6200098d565b604051620002f2919062001654565b60405180910390f35b62000319600480360381019062000313919062001471565b62000b1f565b005b62000339600480360381019062000333919062001276565b62000b92565b604051620003489190620014f7565b60405180910390f35b6200036f600480360381019062000369919062001276565b62000bdb565b6040516200037e9190620017bc565b60405180910390f35b620003a560048036038101906200039f919062001471565b62000c5b565b604051620003b49190620014c9565b60405180910390f35b620003db6004803603810190620003d5919062001ae2565b62000c9d565b005b620003fb6004803603810190620003f5919062001471565b62000e0b565b6040516200040a9190620014c9565b60405180910390f35b6200043160048036038101906200042b919062001276565b62000e94565b604051620004409190620016ca565b60405180910390f35b62000467600480360381019062000461919062001276565b62000f14565b60405162000476919062001412565b60405180910390f35b6200049d600480360381019062000497919062001276565b62001052565b604051620004ac9190620017bc565b60405180910390f35b620004d36004803603810190620004cd919062001471565b6200117c565b005b60606000620004e48362000b92565b905060008167ffffffffffffffff811115620005055762000504620017e5565b5b6040519080825280602002602001820160405280156200053a57816020015b6060815260200190600190039081620005245790505b50905060005b828110156200060857620005d16000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001846200059c919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620008a8565b828281518110620005e757620005e662001c3a565b5b60200260200101819052508080620005ff9062001c69565b91505062000540565b508092505050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806200069c848462000e0b565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401620006d99190620014c9565b602060405180830381865afa158015620006f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071d919062001ccd565b91505092915050565b8373ffffffffffffffffffffffffffffffffffffffff166332b5d1ab8484846040518463ffffffff1660e01b8152600401620007659392919062001cff565b600060405180830381600087803b1580156200078057600080fd5b505af115801562000795573d6000803e3d6000fd5b5050505050505050565b60608173ffffffffffffffffffffffffffffffffffffffff1663aa6ca8086040518163ffffffff1660e01b8152600401600060405180830381865afa158015620007ed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000818919062001dfa565b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e15fccb7836040518263ffffffff1660e01b81526004016200085c9190620014f7565b602060405180830381865afa1580156200087a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a0919062001ccd565b905092915050565b60608173ffffffffffffffffffffffffffffffffffffffff166317d7de7c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015620008f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000921919062001ec9565b9050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663cb5453646040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200097157600080fd5b505af115801562000986573d6000803e3d6000fd5b5050505050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008167ffffffffffffffff811115620009f257620009f1620017e5565b5b60405190808252806020026020018201604052801562000a215781602001602082028036833780820191505090505b50905060005b8281101562000b14576000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018362000a7f919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000ac45762000ac362001c3a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808062000b0b9062001c69565b91505062000a27565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff1663db006a75826040518263ffffffff1660e01b815260040162000b5a9190620014f7565b600060405180830381600087803b15801562000b7557600080fd5b505af115801562000b8a573d6000803e3d6000fd5b505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60608173ffffffffffffffffffffffffffffffffffffffff16633388bbc36040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000c29573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000c54919062001fc1565b9050919050565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000338585858560405162000cb290620011ef565b62000cc295949392919062002012565b604051809103906000f08015801562000cdf573d6000803e3d6000fd5b509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815462000d309062001c69565b91905081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663f60322ad836040518263ffffffff1660e01b815260040162000e489190620014f7565b602060405180830381865afa15801562000e66573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e8c91906200208b565b905092915050565b60608173ffffffffffffffffffffffffffffffffffffffff1663150704016040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000ee2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000f0d919062001ec9565b9050919050565b6060600062000f238362000b92565b905060008167ffffffffffffffff81111562000f445762000f43620017e5565b5b60405190808252806020026020018201604052801562000f7957816020015b606081526020019060019003908162000f635790505b50905060005b828110156200104757620010106000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018462000fdb919062001bff565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000e94565b82828151811062001026576200102562001c3a565b5b602002602001018190525080806200103e9062001c69565b91505062000f7f565b508092505050919050565b606060008273ffffffffffffffffffffffffffffffffffffffff1663512409716040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c8919062001ccd565b905060008167ffffffffffffffff811115620010e957620010e8620017e5565b5b604051908082528060200260200182016040528015620011185781602001602082028036833780820191505090505b50905060005b82811015620011715760006200113586836200068d565b9050808383815181106200114e576200114d62001c3a565b5b602002602001018181525050508080620011689062001c69565b9150506200111e565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff1663a0712d68826040518263ffffffff1660e01b8152600401620011b79190620014f7565b600060405180830381600087803b158015620011d257600080fd5b505af1158015620011e7573d6000803e3d6000fd5b505050505050565b6138fb80620020be83390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200123e8262001211565b9050919050565b620012508162001231565b81146200125c57600080fd5b50565b600081359050620012708162001245565b92915050565b6000602082840312156200128f576200128e62001207565b5b60006200129f848285016200125f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001310578082015181840152602081019050620012f3565b60008484015250505050565b6000601f19601f8301169050919050565b60006200133a82620012d4565b620013468185620012df565b935062001358818560208601620012f0565b62001363816200131c565b840191505092915050565b60006200137c83836200132d565b905092915050565b6000602082019050919050565b60006200139e82620012a8565b620013aa8185620012b3565b935083602082028501620013be85620012c4565b8060005b85811015620014005784840389528151620013de85826200136e565b9450620013eb8362001384565b925060208a01995050600181019050620013c2565b50829750879550505050505092915050565b600060208201905081810360008301526200142e818462001391565b905092915050565b6000819050919050565b6200144b8162001436565b81146200145757600080fd5b50565b6000813590506200146b8162001440565b92915050565b600080604083850312156200148b576200148a62001207565b5b60006200149b858286016200125f565b9250506020620014ae858286016200145a565b9150509250929050565b620014c38162001231565b82525050565b6000602082019050620014e06000830184620014b8565b92915050565b620014f18162001436565b82525050565b60006020820190506200150e6000830184620014e6565b92915050565b6000806000806080858703121562001531576200153062001207565b5b600062001541878288016200125f565b945050602062001554878288016200145a565b935050604062001567878288016200145a565b92505060606200157a878288016200145a565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620015bd8162001231565b82525050565b6000620015d18383620015b2565b60208301905092915050565b6000602082019050919050565b6000620015f78262001586565b62001603818562001591565b93506200161083620015a2565b8060005b83811015620016475781516200162b8882620015c3565b97506200163883620015dd565b92505060018101905062001614565b5085935050505092915050565b60006020820190508181036000830152620016708184620015ea565b905092915050565b600082825260208201905092915050565b60006200169682620012d4565b620016a2818562001678565b9350620016b4818560208601620012f0565b620016bf816200131c565b840191505092915050565b60006020820190508181036000830152620016e6818462001689565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620017258162001436565b82525050565b60006200173983836200171a565b60208301905092915050565b6000602082019050919050565b60006200175f82620016ee565b6200176b8185620016f9565b935062001778836200170a565b8060005b83811015620017af5781516200179388826200172b565b9750620017a08362001745565b9250506001810190506200177c565b5085935050505092915050565b60006020820190508181036000830152620017d8818462001752565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200181f826200131c565b810181811067ffffffffffffffff82111715620018415762001840620017e5565b5b80604052505050565b600062001856620011fd565b905062001864828262001814565b919050565b600067ffffffffffffffff821115620018875762001886620017e5565b5b602082029050602081019050919050565b600080fd5b6000620018b4620018ae8462001869565b6200184a565b90508083825260208201905060208402830185811115620018da57620018d962001898565b5b835b81811015620019075780620018f288826200125f565b845260208401935050602081019050620018dc565b5050509392505050565b600082601f830112620019295762001928620017e0565b5b81356200193b8482602086016200189d565b91505092915050565b600067ffffffffffffffff821115620019625762001961620017e5565b5b602082029050602081019050919050565b60006200198a620019848462001944565b6200184a565b90508083825260208201905060208402830185811115620019b057620019af62001898565b5b835b81811015620019dd5780620019c888826200145a565b845260208401935050602081019050620019b2565b5050509392505050565b600082601f830112620019ff57620019fe620017e0565b5b813562001a1184826020860162001973565b91505092915050565b600080fd5b600067ffffffffffffffff82111562001a3d5762001a3c620017e5565b5b62001a48826200131c565b9050602081019050919050565b82818337600083830152505050565b600062001a7b62001a758462001a1f565b6200184a565b90508281526020810184848401111562001a9a5762001a9962001a1a565b5b62001aa784828562001a55565b509392505050565b600082601f83011262001ac75762001ac6620017e0565b5b813562001ad984826020860162001a64565b91505092915050565b6000806000806080858703121562001aff5762001afe62001207565b5b600085013567ffffffffffffffff81111562001b205762001b1f6200120c565b5b62001b2e8782880162001911565b945050602085013567ffffffffffffffff81111562001b525762001b516200120c565b5b62001b6087828801620019e7565b935050604085013567ffffffffffffffff81111562001b845762001b836200120c565b5b62001b928782880162001aaf565b925050606085013567ffffffffffffffff81111562001bb65762001bb56200120c565b5b62001bc48782880162001aaf565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001c0c8262001436565b915062001c198362001436565b925082820190508082111562001c345762001c3362001bd0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062001c768262001436565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001cab5762001caa62001bd0565b5b600182019050919050565b60008151905062001cc78162001440565b92915050565b60006020828403121562001ce65762001ce562001207565b5b600062001cf68482850162001cb6565b91505092915050565b600060608201905062001d166000830186620014e6565b62001d256020830185620014e6565b62001d346040830184620014e6565b949350505050565b60008151905062001d4d8162001245565b92915050565b600062001d6a62001d648462001869565b6200184a565b9050808382526020820190506020840283018581111562001d905762001d8f62001898565b5b835b8181101562001dbd578062001da8888262001d3c565b84526020840193505060208101905062001d92565b5050509392505050565b600082601f83011262001ddf5762001dde620017e0565b5b815162001df184826020860162001d53565b91505092915050565b60006020828403121562001e135762001e1262001207565b5b600082015167ffffffffffffffff81111562001e345762001e336200120c565b5b62001e428482850162001dc7565b91505092915050565b600062001e6262001e5c8462001a1f565b6200184a565b90508281526020810184848401111562001e815762001e8062001a1a565b5b62001e8e848285620012f0565b509392505050565b600082601f83011262001eae5762001ead620017e0565b5b815162001ec084826020860162001e4b565b91505092915050565b60006020828403121562001ee25762001ee162001207565b5b600082015167ffffffffffffffff81111562001f035762001f026200120c565b5b62001f118482850162001e96565b91505092915050565b600062001f3162001f2b8462001944565b6200184a565b9050808382526020820190506020840283018581111562001f575762001f5662001898565b5b835b8181101562001f84578062001f6f888262001cb6565b84526020840193505060208101905062001f59565b5050509392505050565b600082601f83011262001fa65762001fa5620017e0565b5b815162001fb884826020860162001f1a565b91505092915050565b60006020828403121562001fda5762001fd962001207565b5b600082015167ffffffffffffffff81111562001ffb5762001ffa6200120c565b5b620020098482850162001f8e565b91505092915050565b600060a082019050620020296000830188620014b8565b81810360208301526200203d8187620015ea565b9050818103604083015262002053818662001752565b9050818103606083015262002069818562001689565b905081810360808301526200207f818462001689565b90509695505050505050565b600060208284031215620020a457620020a362001207565b5b6000620020b48482850162001d3c565b9150509291505056fe60a06040526012600560006101000a81548160ff021916908360ff160217905550737a250d5630b4cf539739df2c5dacb4c659f2488d600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730d500b1d8e8ef31e21c99d1db9a6444d3adf1270600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200013a57600080fd5b50604051620038fb380380620038fb8339818101604052810190620001609190620007f6565b600083519050600080662386f26fc10000905060005b83811015620001c257868181518110620001955762000194620008fa565b5b602002602001015183620001aa919062000958565b92508080620001b99062000993565b91505062000176565b5060005b83811015620002325781878281518110620001e657620001e5620008fa565b5b6020026020010151620001fa9190620009e0565b87828151811062000210576200020f620008fa565b5b6020026020010181815250508080620002299062000993565b915050620001c6565b5060648211156200027a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002719062000a8c565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508660079080519060200190620002c692919062000312565b508560089080519060200190620002df929190620003a1565b508460039081620002f1919062000cef565b50836004908162000303919062000cef565b50505050505050505062000dd6565b8280548282559060005260206000209081019282156200038e579160200282015b828111156200038d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000333565b5b5090506200039d9190620003f3565b5090565b828054828255906000526020600020908101928215620003e0579160200282015b82811115620003df578251825591602001919060010190620003c2565b5b509050620003ef9190620003f3565b5090565b5b808211156200040e576000816000905550600101620003f4565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004538262000426565b9050919050565b620004658162000446565b81146200047157600080fd5b50565b60008151905062000485816200045a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004db8262000490565b810181811067ffffffffffffffff82111715620004fd57620004fc620004a1565b5b80604052505050565b60006200051262000412565b9050620005208282620004d0565b919050565b600067ffffffffffffffff821115620005435762000542620004a1565b5b602082029050602081019050919050565b600080fd5b6000620005706200056a8462000525565b62000506565b9050808382526020820190506020840283018581111562000596576200059562000554565b5b835b81811015620005c35780620005ae888262000474565b84526020840193505060208101905062000598565b5050509392505050565b600082601f830112620005e557620005e46200048b565b5b8151620005f784826020860162000559565b91505092915050565b600067ffffffffffffffff8211156200061e576200061d620004a1565b5b602082029050602081019050919050565b6000819050919050565b62000644816200062f565b81146200065057600080fd5b50565b600081519050620006648162000639565b92915050565b6000620006816200067b8462000600565b62000506565b90508083825260208201905060208402830185811115620006a757620006a662000554565b5b835b81811015620006d45780620006bf888262000653565b845260208401935050602081019050620006a9565b5050509392505050565b600082601f830112620006f657620006f56200048b565b5b8151620007088482602086016200066a565b91505092915050565b600080fd5b600067ffffffffffffffff821115620007345762000733620004a1565b5b6200073f8262000490565b9050602081019050919050565b60005b838110156200076c5780820151818401526020810190506200074f565b60008484015250505050565b60006200078f620007898462000716565b62000506565b905082815260208101848484011115620007ae57620007ad62000711565b5b620007bb8482856200074c565b509392505050565b600082601f830112620007db57620007da6200048b565b5b8151620007ed84826020860162000778565b91505092915050565b600080600080600060a086880312156200081557620008146200041c565b5b6000620008258882890162000474565b955050602086015167ffffffffffffffff81111562000849576200084862000421565b5b6200085788828901620005cd565b945050604086015167ffffffffffffffff8111156200087b576200087a62000421565b5b6200088988828901620006de565b935050606086015167ffffffffffffffff811115620008ad57620008ac62000421565b5b620008bb88828901620007c3565b925050608086015167ffffffffffffffff811115620008df57620008de62000421565b5b620008ed88828901620007c3565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000965826200062f565b915062000972836200062f565b92508282019050808211156200098d576200098c62000929565b5b92915050565b6000620009a0826200062f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009d557620009d462000929565b5b600182019050919050565b6000620009ed826200062f565b9150620009fa836200062f565b925082820262000a0a816200062f565b9150828204841483151762000a245762000a2362000929565b5b5092915050565b600082825260208201905092915050565b7f70657263656e746167657320646f206e6f742061646420757020746f20313030600082015250565b600062000a7460208362000a2b565b915062000a818262000a3c565b602082019050919050565b6000602082019050818103600083015262000aa78162000a65565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b0157607f821691505b60208210810362000b175762000b1662000ab9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000b42565b62000b8d868362000b42565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000bd062000bca62000bc4846200062f565b62000ba5565b6200062f565b9050919050565b6000819050919050565b62000bec8362000baf565b62000c0462000bfb8262000bd7565b84845462000b4f565b825550505050565b600090565b62000c1b62000c0c565b62000c2881848462000be1565b505050565b5b8181101562000c505762000c4460008262000c11565b60018101905062000c2e565b5050565b601f82111562000c9f5762000c698162000b1d565b62000c748462000b32565b8101602085101562000c84578190505b62000c9c62000c938562000b32565b83018262000c2d565b50505b505050565b600082821c905092915050565b600062000cc46000198460080262000ca4565b1980831691505092915050565b600062000cdf838362000cb1565b9150826002028217905092915050565b62000cfa8262000aae565b67ffffffffffffffff81111562000d165762000d15620004a1565b5b62000d22825462000ae8565b62000d2f82828562000c54565b600060209050601f83116001811462000d67576000841562000d52578287015190505b62000d5e858262000cd1565b86555062000dce565b601f19841662000d778662000b1d565b60005b8281101562000da15784890151825560018201915060208501945060208101905062000d7a565b8683101562000dc1578489015162000dbd601f89168262000cb1565b8355505b6001600288020188555050505b505050505050565b608051612b0262000df96000396000818161082e01526115ed0152612b026000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636e66e4c6116100f9578063cb54536411610097578063e15fccb711610071578063e15fccb7146104c2578063eb84328e146104f2578063f60322ad14610522578063f885838614610552576101a9565b8063cb5453641461046c578063db006a7514610476578063dd62ed3e14610492576101a9565b8063a0712d68116100d3578063a0712d68146103e4578063a9059cbb14610400578063aa6ca80814610430578063c4e41b221461044e576101a9565b80636e66e4c61461036657806370a082311461039657806395d89b41146103c6576101a9565b806323b872dd1161016657806332b5d1ab1161014057806332b5d1ab146102de5780633388bbc3146102fa5780634f64b2be146103185780635124097114610348576101a9565b806323b872dd146102605780632a11ced014610290578063313ce567146102c0576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806315070401146101fc57806317d7de7c1461021a57806318160ddd1461023857806322cb33c914610256575b600080fd5b6101b6610582565b6040516101c39190611f85565b60405180910390f35b6101e660048036038101906101e1919061204f565b610610565b6040516101f391906120aa565b60405180910390f35b610204610702565b6040516102119190611f85565b60405180910390f35b610222610794565b60405161022f9190611f85565b60405180910390f35b610240610826565b60405161024d91906120d4565b60405180910390f35b61025e61082c565b005b61027a600480360381019061027591906120ef565b610a94565b60405161028791906120aa565b60405180910390f35b6102aa60048036038101906102a59190612142565b610ca8565b6040516102b7919061217e565b60405180910390f35b6102c8610ce7565b6040516102d591906121b5565b60405180910390f35b6102f860048036038101906102f391906121d0565b610cfa565b005b610302611079565b60405161030f91906122e1565b60405180910390f35b610332600480360381019061032d9190612142565b6110d1565b60405161033f919061217e565b60405180910390f35b610350611110565b60405161035d91906120d4565b60405180910390f35b610380600480360381019061037b9190612303565b61111d565b60405161038d91906120d4565b60405180910390f35b6103b060048036038101906103ab9190612343565b61117d565b6040516103bd91906120d4565b60405180910390f35b6103ce611195565b6040516103db9190611f85565b60405180910390f35b6103fe60048036038101906103f99190612142565b611223565b005b61041a6004803603810190610415919061204f565b6113d4565b60405161042791906120aa565b60405180910390f35b610438611554565b604051610445919061242e565b60405180910390f35b6104566115e2565b60405161046391906120d4565b60405180910390f35b6104746115eb565b005b610490600480360381019061048b9190612142565b6119b9565b005b6104ac60048036038101906104a79190612450565b611c39565b6040516104b991906120d4565b60405180910390f35b6104dc60048036038101906104d79190612142565b611c5e565b6040516104e991906120d4565b60405180910390f35b61050c60048036038101906105079190612142565b611c86565b60405161051991906120d4565b60405180910390f35b61053c60048036038101906105379190612142565b611cae565b604051610549919061217e565b60405180910390f35b61056c60048036038101906105679190612142565b611cf6565b60405161057991906120d4565b60405180910390f35b6003805461058f906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb906124bf565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b505050505081565b600081600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106f091906120d4565b60405180910390a36001905092915050565b606060048054610711906124bf565b80601f016020809104026020016040519081016040528092919081815260200182805461073d906124bf565b801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b5050505050905090565b6060600380546107a3906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546107cf906124bf565b801561081c5780601f106107f15761010080835404028352916020019161081c565b820191906000526020600020905b8154815290600101906020018083116107ff57829003601f168201915b5050505050905090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461088457600080fd5b60006007805490509050600080670de0b6b3a7640000905060005b8381101561097f57600781815481106108bb576108ba6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091e919061217e565b602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190612534565b8361096a9190612590565b92508080610977906125c4565b91505061089f565b5060005b83811015610a8e578282600783815481106109a1576109a06124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a04919061217e565b602060405180830381865afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612534565b610a4f919061260c565b610a59919061267d565b60088281548110610a6d57610a6c6124f0565b5b90600052602060002001819055508080610a86906125c4565b915050610983565b50505050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b2291906126ae565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b7891906126ae565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bce9190612590565b925050819055506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9591906120d4565b60405180910390a3600190509392505050565b60068181548110610cb857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b6000600267ffffffffffffffff811115610d1757610d166126e2565b5b604051908082528060200260200182016040528015610d455781602001602082028036833780820191505090505b50905060078481548110610d5c57610d5b6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610d9b57610d9a6124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110610e0c57610e0b6124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060078381548110610e5a57610e596124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110610e9957610e986124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060078481548110610ee757610ee66124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f6e929190612711565b6020604051808303816000875af1158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb19190612766565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398360008430600f426110029190612590565b6040518663ffffffff1660e01b81526004016110229594939291906127d8565b6000604051808303816000875af1158015611041573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061106a919061294b565b5061107361082c565b50505050565b606060088054806020026020016040519081016040528092919081815260200182805480156110c757602002820191906000526020600020905b8154815260200190600101908083116110b3575b5050505050905090565b600781815481106110e157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600780549050905090565b600080670de0b6b3a76400009050600060088581548110611141576111406124f0565b5b90600052602060002001549050611173826111658684611d1a90919063ffffffff16565b611d3090919063ffffffff16565b9250505092915050565b60016020528060005260406000206000915090505481565b600480546111a2906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546111ce906124bf565b801561121b5780601f106111f05761010080835404028352916020019161121b565b820191906000526020600020905b8154815290600101906020018083116111fe57829003601f168201915b505050505081565b6000600780549050905060005b818110156113635760006007828154811061124e5761124d6124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611287838661111d565b905060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3230856040518463ffffffff1660e01b81526004016112c893929190612994565b6020604051808303816000875af11580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190612766565b90508061134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490612a17565b60405180910390fd5b505050808061135b906125c4565b915050611230565b506006329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113d082611d46565b5050565b600081600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461142591906126ae565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461147b9190612590565b925050819055506006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161154291906120d4565b60405180910390a36001905092915050565b606060078054806020026020016040519081016040528092919081815260200182805480156115d857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161158e575b5050505050905090565b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167090612a83565b60405180910390fd5b600060068054806020026020016040519081016040528092919081815260200182805480156116fd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116b3575b5050505050905060008060008060006006805490509050600093505b808410156118825760018461172e9190612590565b92505b8083101561186f5785838151811061174c5761174b6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686858151811061177d5761177c6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361185c578291505b6001816117b191906126ae565b82101561183f57856001836117c69190612590565b815181106117d7576117d66124f0565b5b60200260200101518683815181106117f2576117f16124f0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611837906125c4565b9250506117a4565b808061184a90612aa3565b915050828061185890612aa3565b9350505b8280611867906125c4565b935050611731565b838061187a906125c4565b945050611719565b60008651905060005b818110156119a6576000600160008a84815181106118ac576118ab6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156119935760006063600160008b85815181106119105761190f6124f0565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461195d919061267d565b9050611983898381518110611975576119746124f0565b5b602002602001015182611e1d565b808861198f9190612590565b9750505b808061199e906125c4565b91505061188b565b506119b086611d46565b50505050505050565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611a0557600080fd5b6000600780549050905060006007805480602002602001604051908101604052809291908181526020018280548015611a9357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a49575b5050505050905060005b82811015611c29576000828281518110611aba57611ab96124f0565b5b602002602001015190506000611ad0838761111d565b90508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b332836040518363ffffffff1660e01b8152600401611b0d929190612711565b6020604051808303816000875af1158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190612766565b5060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb32846040518363ffffffff1660e01b8152600401611b8e929190612711565b6020604051808303816000875af1158015611bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd19190612766565b905080611c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0a90612a17565b60405180910390fd5b5050508080611c21906125c4565b915050611a9d565b50611c343284611e1d565b505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600060088281548110611c7457611c736124f0565b5b90600052602060002001549050919050565b600060088281548110611c9c57611c9b6124f0565b5b90600052602060002001549050919050565b600060078281548110611cc457611cc36124f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60088181548110611d0657600080fd5b906000526020600020016000915090505481565b60008183611d28919061260c565b905092915050565b60008183611d3e919061267d565b905092915050565b80600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d959190612590565b9250508190555080600080828254611dad9190612590565b925050819055503273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e1291906120d4565b60405180910390a350565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e6c91906126ae565b9250508190555080600080828254611e8491906126ae565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ee991906120d4565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f2f578082015181840152602081019050611f14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f5782611ef5565b611f618185611f00565b9350611f71818560208601611f11565b611f7a81611f3b565b840191505092915050565b60006020820190508181036000830152611f9f8184611f4c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fe682611fbb565b9050919050565b611ff681611fdb565b811461200157600080fd5b50565b60008135905061201381611fed565b92915050565b6000819050919050565b61202c81612019565b811461203757600080fd5b50565b60008135905061204981612023565b92915050565b6000806040838503121561206657612065611fb1565b5b600061207485828601612004565b92505060206120858582860161203a565b9150509250929050565b60008115159050919050565b6120a48161208f565b82525050565b60006020820190506120bf600083018461209b565b92915050565b6120ce81612019565b82525050565b60006020820190506120e960008301846120c5565b92915050565b60008060006060848603121561210857612107611fb1565b5b600061211686828701612004565b935050602061212786828701612004565b92505060406121388682870161203a565b9150509250925092565b60006020828403121561215857612157611fb1565b5b60006121668482850161203a565b91505092915050565b61217881611fdb565b82525050565b6000602082019050612193600083018461216f565b92915050565b600060ff82169050919050565b6121af81612199565b82525050565b60006020820190506121ca60008301846121a6565b92915050565b6000806000606084860312156121e9576121e8611fb1565b5b60006121f78682870161203a565b93505060206122088682870161203a565b92505060406122198682870161203a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61225881612019565b82525050565b600061226a838361224f565b60208301905092915050565b6000602082019050919050565b600061228e82612223565b612298818561222e565b93506122a38361223f565b8060005b838110156122d45781516122bb888261225e565b97506122c683612276565b9250506001810190506122a7565b5085935050505092915050565b600060208201905081810360008301526122fb8184612283565b905092915050565b6000806040838503121561231a57612319611fb1565b5b60006123288582860161203a565b92505060206123398582860161203a565b9150509250929050565b60006020828403121561235957612358611fb1565b5b600061236784828501612004565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123a581611fdb565b82525050565b60006123b7838361239c565b60208301905092915050565b6000602082019050919050565b60006123db82612370565b6123e5818561237b565b93506123f08361238c565b8060005b8381101561242157815161240888826123ab565b9750612413836123c3565b9250506001810190506123f4565b5085935050505092915050565b6000602082019050818103600083015261244881846123d0565b905092915050565b6000806040838503121561246757612466611fb1565b5b600061247585828601612004565b925050602061248685828601612004565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124d757607f821691505b6020821081036124ea576124e9612490565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061252e81612023565b92915050565b60006020828403121561254a57612549611fb1565b5b60006125588482850161251f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061259b82612019565b91506125a683612019565b92508282019050808211156125be576125bd612561565b5b92915050565b60006125cf82612019565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361260157612600612561565b5b600182019050919050565b600061261782612019565b915061262283612019565b925082820261263081612019565b9150828204841483151761264757612646612561565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061268882612019565b915061269383612019565b9250826126a3576126a261264e565b5b828204905092915050565b60006126b982612019565b91506126c483612019565b92508282039050818111156126dc576126db612561565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050612726600083018561216f565b61273360208301846120c5565b9392505050565b6127438161208f565b811461274e57600080fd5b50565b6000815190506127608161273a565b92915050565b60006020828403121561277c5761277b611fb1565b5b600061278a84828501612751565b91505092915050565b6000819050919050565b6000819050919050565b60006127c26127bd6127b884612793565b61279d565b612019565b9050919050565b6127d2816127a7565b82525050565b600060a0820190506127ed60008301886120c5565b6127fa60208301876127c9565b818103604083015261280c81866123d0565b905061281b606083018561216f565b61282860808301846120c5565b9695505050505050565b600080fd5b61284082611f3b565b810181811067ffffffffffffffff8211171561285f5761285e6126e2565b5b80604052505050565b6000612872611fa7565b905061287e8282612837565b919050565b600067ffffffffffffffff82111561289e5761289d6126e2565b5b602082029050602081019050919050565b600080fd5b60006128c76128c284612883565b612868565b905080838252602082019050602084028301858111156128ea576128e96128af565b5b835b8181101561291357806128ff888261251f565b8452602084019350506020810190506128ec565b5050509392505050565b600082601f83011261293257612931612832565b5b81516129428482602086016128b4565b91505092915050565b60006020828403121561296157612960611fb1565b5b600082015167ffffffffffffffff81111561297f5761297e611fb6565b5b61298b8482850161291d565b91505092915050565b60006060820190506129a9600083018661216f565b6129b6602083018561216f565b6129c360408301846120c5565b949350505050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612a01600f83611f00565b9150612a0c826129cb565b602082019050919050565b60006020820190508181036000830152612a30816129f4565b9050919050565b7f4e6f74206f776e65722100000000000000000000000000000000000000000000600082015250565b6000612a6d600a83611f00565b9150612a7882612a37565b602082019050919050565b60006020820190508181036000830152612a9c81612a60565b9050919050565b6000612aae82612019565b915060008203612ac157612ac0612561565b5b60018203905091905056fea2646970667358221220d99e0ce7b94eef8be065963b0a8f32c45ba4d1e02a07d1edc75ce16f9c8ef9be64736f6c63430008130033a2646970667358221220c181f13a910e445a562d06bee650381650e8e340837bd6e7a1f6ed567d85c1a264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "collectFee(address)": {
        "params": {
          "_indexAddress": "= index token to withdraw from, requires msg.sender is owner"
        }
      },
      "getAllAmounts(address)": {
        "params": {
          "_indexAddress": "= address of index token"
        }
      },
      "getAllPercentages(address)": {
        "params": {
          "_indexAddress": "= address of index token"
        }
      },
      "getAllTokenAddresses(address)": {
        "params": {
          "_creator": "= address of user"
        }
      },
      "getAllUnderlying(address)": {
        "params": {
          "_indexAddress": "= address of index token"
        }
      },
      "getAmountOfIndexTokens(address)": {
        "params": {
          "_creator": "= address of user"
        }
      },
      "getSingleAmount(address,uint256)": {
        "params": {
          "_indexAddress": "= address of index token",
          "underlyingIndex": "= index of Index token's underlying assets array"
        }
      },
      "getSinglePercentage(address,uint256)": {
        "params": {
          "_indexAddress": "= address of index token",
          "underlyingIndex": "= index of index token's underlying assets array"
        }
      },
      "getSingleTokenAddress(address,uint256)": {
        "params": {
          "_creator": "= address of user",
          "index": "= index of user's created Index token"
        }
      },
      "getSingleUnderlying(address,uint256)": {
        "params": {
          "_indexAddress": "= address of index token",
          "underlyingIndex": "= index of Index token's array of underlying assets"
        }
      },
      "issueToken(address,uint256)": {
        "params": {
          "_tokenAddress": "= address of Index Token",
          "amount": "= amount of tokens to issue"
        }
      },
      "rebalance(address,uint256,uint256,uint256)": {
        "params": {
          "_amtToSell": "= amount of underlying token to sell",
          "_tokenAddress": "= address of index token",
          "_underlyingBuy": "= index of index token's underlying assets array to buy",
          "_underlyingSell": "= index of index token's underlying assets array to sell"
        }
      },
      "redeemToken(address,uint256)": {
        "params": {
          "_tokenAddress": "= address of Index Token",
          "amount": "= amount of Index Token to burn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectFee(address)": {
        "notice": "sends 1% of all index tokens to token creator"
      },
      "getAllAmounts(address)": {
        "notice": "return array of all token balances in an index"
      },
      "getAllPercentages(address)": {
        "notice": "get array of all percentages for a token"
      },
      "getAllTokenAddresses(address)": {
        "notice": "return array of tokens per address"
      },
      "getAllUnderlying(address)": {
        "notice": "get array of all underlying assets of an index token"
      },
      "getAmountOfIndexTokens(address)": {
        "notice": "returns the amount of index tokens a user has created"
      },
      "getSingleAmount(address,uint256)": {
        "notice": "get balance of a single token balance in an index"
      },
      "getSinglePercentage(address,uint256)": {
        "notice": "same as above, but get percentage for a specific underlying asset"
      },
      "getSingleTokenAddress(address,uint256)": {
        "notice": "Same as above, but returns address of a single index token by entering owner address, and index of the token"
      },
      "getSingleUnderlying(address,uint256)": {
        "notice": "Same as above, but returns address of a single underlying token of a index token"
      },
      "issueToken(address,uint256)": {
        "notice": "mint/issue tokens in existing Index Token"
      },
      "rebalance(address,uint256,uint256,uint256)": {
        "notice": "rebalance, maybe give index of underlying asset to sell,receieve, and amount of token sold"
      },
      "redeemToken(address,uint256)": {
        "notice": "redeem token, burn index token, receive underlying assets"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1404,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "addressToTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 1408,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "tokenCount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}