{
  "language": "Solidity",
  "sources": {
    "contracts/mintAllTestTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function _mint(address account, uint256 amount) external;\r\n}\r\ncontract mintAllTestTokens {\r\n    address USDCAddress = 0xafab3903Baa32D35D6E843be4144D65176E8641C;\r\n    address WETHAddress = 0xeEae660205474B5E031e4Be8b39D2AfC5F718b8B;\r\n    address WBTCAddress = 0x092553A963a91Fd4FaCE7004DeA8A37827477901;\r\n    address MATICAddress = 0x3900e1636a6d39b46Fe427F44B0677746819D948;\r\n    address AAVEAddress = 0x1fC8B98d03b4EB308267D642703173072cD8a5Ff;\r\n\r\n    function mintAllTokens() public {\r\n\r\n        IERC20(USDCAddress)._mint(msg.sender, 1000 ether);\r\n        IERC20(WETHAddress)._mint(msg.sender, 1000 ether);\r\n        IERC20(WBTCAddress)._mint(msg.sender, 1000 ether);\r\n        IERC20(MATICAddress)._mint(msg.sender, 1000 ether);\r\n        IERC20(AAVEAddress)._mint(msg.sender, 1000 ether);\r\n\r\n\r\n\r\n\r\n        IERC20(USDCAddress).transfer(msg.sender, 1000 ether);\r\n        IERC20(WETHAddress).transfer(msg.sender, 1000 ether);\r\n        IERC20(WBTCAddress).transfer(msg.sender, 1000 ether);\r\n        IERC20(MATICAddress).transfer(msg.sender, 1000 ether);\r\n        IERC20(AAVEAddress).transfer(msg.sender, 1000 ether);\r\n    }\r\n    \r\n\r\n}   \r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}