{
  "language": "Solidity",
  "sources": {
    "contracts/mintAllTestTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\ncontract mintAllTestTokens {\r\n    address USDCAddress = 0x4D424DF818920daA5E7c18d895FeEFf0a0aC7696;\r\n    address WETHAddress = 0xFFB5915AEa9C1337b9B18A5Eea52E26570529D61;\r\n    address WBTCAddress = 0xc8A83EB3B77C22C9189465db7F6F946592b30D4E;\r\n    address MATICAddress = 0xEb1Eb59a354A536288d84CbF6028a2469CdAd741;\r\n    address AAVEAddress = 0xC4577cE8C2a7746BdA75F678d5b951EB26E3567D;\r\n\r\n    function mintAllTokens() public {\r\n        genericToken(USDCAddress).mint(1000 ether);\r\n        genericToken(WETHAddress).mint(1000 ether);\r\n        genericToken(WBTCAddress).mint(1000 ether);\r\n        genericToken(MATICAddress).mint(1000 ether);\r\n        genericToken(AAVEAddress).mint(1000 ether);\r\n\r\n        genericToken(USDCAddress).approve(msg.sender,1000 ether);\r\n        genericToken(WETHAddress).approve(msg.sender,1000 ether);\r\n        genericToken(WBTCAddress).approve(msg.sender,1000 ether);\r\n        genericToken(MATICAddress).approve(msg.sender,1000 ether);\r\n        genericToken(AAVEAddress).approve(msg.sender,1000 ether);\r\n\r\n        genericToken(USDCAddress).transferFrom(address(this),msg.sender,1000);\r\n        genericToken(WETHAddress).transferFrom(address(this),msg.sender,1000 ether);\r\n        genericToken(WBTCAddress).transferFrom(address(this),msg.sender,1000 ether);\r\n        genericToken(MATICAddress).transferFrom(address(this),msg.sender,1000 ether);\r\n        genericToken(AAVEAddress).transferFrom(address(this),msg.sender,1000 ether);\r\n\r\n                \r\n    }\r\n    \r\n\r\n}   \r\n\r\ninterface genericToken {\r\n    function mint(uint amount) external;\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}